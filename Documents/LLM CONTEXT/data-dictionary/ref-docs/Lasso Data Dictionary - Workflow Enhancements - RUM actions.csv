action_name	action_type	when_to_fire	context_keys	sample_code
				
# Shopping Cart / Multi-Select Actions (Previz)				
cart_item_added	action	Asset added to shopping cart	workflow, asset_id, asset_type, cart_size, selection_method	datadogRum.addAction('cart_item_added', { workflow, asset_id, asset_type, cart_size, selection_method });
cart_item_removed	action	Asset removed from shopping cart	workflow, asset_id, asset_type, cart_size	datadogRum.addAction('cart_item_removed', { workflow, asset_id, asset_type, cart_size });
cart_cleared	action	User clears entire shopping cart	workflow, cart_size, reason	datadogRum.addAction('cart_cleared', { workflow, cart_size, reason });
cart_viewed	action	User opens/views shopping cart	workflow, cart_size, referrer_view	datadogRum.addAction('cart_viewed', { workflow, cart_size, referrer_view });
cart_item_edit	action	User edits a single item	workflow, edit_type, edit_value	datadogRum.addAction('cart_item_edit', { workflow, edit_type, edit_value });
cart_item_use_started	action	User initiates action on cart items	workflow, cart_size	datadogRum.addAction('cart_item_use_started', { workflow, cart_size });
cart_item_use_completed	action	Cart import process finishes	workflow, cart_size, success_count, failed_count, action_time_ms	datadogRum.addAction('cart_import_completed', { workflow, cart_size, success_count, failed_count, action_time_ms });
cart_item_use_failed	error	Cart import process fails	workflow, cart_size, error_code, error_message	datadogRum.addError(new Error(`Cart import failed: ${error_code}`), { workflow, cart_size, error_message });
cart_items_tagged	action	User successfully adds a tag to all items in cart	workflow, cart_size, tag_count	datadogRum.addAction('cart_items_tagged', { workflow, cart_size, tag_count });
				
# Collections/Palettes Actions (FLO/DGM)				
collection_create_started	action	User initiates collection creation	workflow, source_view	datadogRum.addAction('collection_create_started', { workflow, source_view });
collection_created	action	New collection successfully created	workflow, collection_id, collection_name, is_public, item_count	datadogRum.addAction('collection_created', { workflow, collection_id, collection_name, is_public, item_count });
collection_item_added	action	Asset added to collection	workflow, collection_id, asset_id, collection_size	datadogRum.addAction('collection_item_added', { workflow, collection_id, asset_id, collection_size });
collection_items_bulk_added	action	Multiple assets added to collection	workflow, collection_id, items_count, collection_size	datadogRum.addAction('collection_items_bulk_added', { workflow, collection_id, items_count, collection_size });
collection_item_removed	action	Asset removed from collection	workflow, collection_id, asset_id, collection_size	datadogRum.addAction('collection_item_removed', { workflow, collection_id, asset_id, collection_size });
collection_items_bulk_removed	action	Multiple assets removed from collection	workflow, collection_id, items_count, collection_size	datadogRum.addAction('collection_items_bulk_removed', { workflow, collection_id, items_count, collection_size });
collection_viewed	action	User views a collection	workflow, collection_id, collection_name, collection_size, is_owner	datadogRum.addAction('collection_viewed', { workflow, collection_id, collection_name, collection_size, is_owner });
collection_URL_copied	action	User shares a collection	workflow, collection_id, collection_visibility	datadogRum.addAction('collection_shared', { workflow, collection_id, collection_visibility });
collection_deleted	action	Collection is deleted	workflow, collection_id, collection_size	datadogRum.addAction('collection_deleted', { workflow, collection_id, collection_size });
collection_made_public	action	Collection is made public	workflow, collection_id, collection_size	datadogRum.addAction('collection_made_public', { workflow, collection_id, collection_size });
collection_made_private	action	Collection is made private	workflow, collection_id, collection_size	datadogRum.addAction('collection_made_private', { workflow, collection_id, collection_size });