name: iOS App CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  XCODE_VERSION: '15.2'
  IOS_SIMULATOR: 'iPhone 15'

jobs:
  # Build and test
  test:
    name: Build & Test
    runs-on: macos-14

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Cache derived data
        uses: actions/cache@v3
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-derived-data-${{ hashFiles('**/*.pbxproj') }}
          restore-keys: |
            ${{ runner.os }}-derived-data-

      - name: Install dependencies
        run: |
          # Add any dependency installation here (e.g., CocoaPods, SPM)
          echo "Installing dependencies..."

      - name: Build app
        run: |
          xcodebuild -project PROJECT_NAME_PLACEHOLDER.xcodeproj \
            -scheme PROJECT_NAME_PLACEHOLDER \
            -destination "platform=iOS Simulator,name=${{ env.IOS_SIMULATOR }}" \
            build-for-testing

      - name: Run unit tests
        run: |
          xcodebuild -project PROJECT_NAME_PLACEHOLDER.xcodeproj \
            -scheme PROJECT_NAME_PLACEHOLDER \
            -destination "platform=iOS Simulator,name=${{ env.IOS_SIMULATOR }}" \
            test-without-building \
            -testPlan PROJECT_NAME_PLACEHOLDERTests

      - name: Run UI tests
        run: |
          xcodebuild -project PROJECT_NAME_PLACEHOLDER.xcodeproj \
            -scheme PROJECT_NAME_PLACEHOLDER \
            -destination "platform=iOS Simulator,name=${{ env.IOS_SIMULATOR }}" \
            test-without-building \
            -testPlan PROJECT_NAME_PLACEHOLDERUITests

      - name: Generate test results
        uses: kishikawakatsumi/xcresulttool@v1
        if: always()
        with:
          path: '**/*.xcresult'

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            **/*.xcresult
          retention-days: 30

  # Code quality and security
  quality:
    name: Code Quality
    runs-on: macos-14

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Install SwiftLint
        run: brew install swiftlint

      - name: Run SwiftLint
        run: swiftlint lint --reporter github-actions-logging

      - name: Run SwiftFormat check
        run: |
          brew install swiftformat
          swiftformat --lint .

  # Build for TestFlight (staging)
  build-staging:
    name: Build for TestFlight
    needs: [test, quality]
    runs-on: macos-14
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build and archive
        run: |
          xcodebuild -project PROJECT_NAME_PLACEHOLDER.xcodeproj \
            -scheme PROJECT_NAME_PLACEHOLDER \
            -archivePath $RUNNER_TEMP/PROJECT_NAME_PLACEHOLDER.xcarchive \
            -configuration Release \
            archive

      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath $RUNNER_TEMP/PROJECT_NAME_PLACEHOLDER.xcarchive \
            -exportOptionsPlist PROJECT_NAME_PLACEHOLDER/ExportOptions.plist \
            -exportPath $RUNNER_TEMP/build

      - name: Upload to TestFlight
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          xcrun altool --upload-app \
            --type ios \
            --file "$RUNNER_TEMP/build/PROJECT_NAME_PLACEHOLDER.ipa" \
            --username "$APPLE_ID" \
            --password "$APPLE_ID_PASSWORD" \
            --asc-provider "$APPLE_TEAM_ID"

      - name: Clean up keychain and provisioning profile
        if: always()
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

  # Build for App Store (production)
  build-production:
    name: Build for App Store
    needs: [test, quality]
    runs-on: macos-14
    if: github.ref == 'refs/heads/main'

    environment:
      name: production
      url: https://apps.apple.com/app/PROJECT_NAME_PLACEHOLDER

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Install the Apple certificate and provisioning profile
        env:
          DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.DISTRIBUTION_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          DISTRIBUTION_PROVISION_PROFILE_BASE64: ${{ secrets.DISTRIBUTION_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/distribution_certificate.p12
          PP_PATH=$RUNNER_TEMP/distribution_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$DISTRIBUTION_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build and archive
        run: |
          xcodebuild -project PROJECT_NAME_PLACEHOLDER.xcodeproj \
            -scheme PROJECT_NAME_PLACEHOLDER \
            -archivePath $RUNNER_TEMP/PROJECT_NAME_PLACEHOLDER.xcarchive \
            -configuration Release \
            archive

      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath $RUNNER_TEMP/PROJECT_NAME_PLACEHOLDER.xcarchive \
            -exportOptionsPlist PROJECT_NAME_PLACEHOLDER/ExportOptionsDistribution.plist \
            -exportPath $RUNNER_TEMP/build

      - name: Upload to App Store
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          xcrun altool --upload-app \
            --type ios \
            --file "$RUNNER_TEMP/build/PROJECT_NAME_PLACEHOLDER.ipa" \
            --username "$APPLE_ID" \
            --password "$APPLE_ID_PASSWORD" \
            --asc-provider "$APPLE_TEAM_ID"

      - name: Clean up keychain and provisioning profile
        if: always()
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/distribution_pp.mobileprovision