[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "PROJECT_NAME_PLACEHOLDER"
dynamic = ["version"]
description = "A LangFlow AI application with FastAPI backend"
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
keywords = ["langflow", "langchain", "ai", "rag", "fastapi", "python"]
authors = [
  { name = "PROJECT_AUTHOR_PLACEHOLDER", email = "PROJECT_EMAIL_PLACEHOLDER" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Framework :: FastAPI",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
]

dependencies = [
  "fastapi[all]>=0.104.0",
  "uvicorn[standard]>=0.24.0",
  "pydantic>=2.5.0",
  "pydantic-settings>=2.1.0",
  "sqlalchemy>=2.0.0",
  "alembic>=1.13.0",
  "asyncpg>=0.29.0",  # PostgreSQL async driver
  "aiosqlite>=0.19.0",  # SQLite async driver
  "redis>=5.0.0",
  "python-jose[cryptography]>=3.3.0",
  "passlib[bcrypt]>=1.7.4",
  "python-multipart>=0.0.6",
  "email-validator>=2.1.0",
  "celery>=5.3.0",
  "httpx>=0.25.0",
  "structlog>=23.2.0",
  "prometheus-client>=0.19.0",
  "sentry-sdk[fastapi]>=1.38.0",
  # AI/LangFlow dependencies
  "langflow>=1.5.0",
  "langchain>=0.3.0",
  "langchain-community>=0.3.0",
  "langchain-openai>=0.2.0",
  "langchain-anthropic>=0.2.0",
  "chromadb>=0.5.0",
  "sentence-transformers>=3.0.0",
  "openai>=1.45.0",
  "anthropic>=0.40.0",
  "pypdf>=4.0.0",
  "python-docx>=1.1.0",
  "beautifulsoup4>=4.12.0",
  "tiktoken>=0.8.0",
]

[project.optional-dependencies]
dev = [
  "pytest>=7.4.0",
  "pytest-asyncio>=0.21.0",
  "pytest-cov>=4.1.0",
  "pytest-mock>=3.12.0",
  "httpx>=0.25.0",
  "faker>=20.0.0",
  "factory-boy>=3.3.0",
  "black>=23.11.0",
  "isort>=5.12.0",
  "flake8>=6.1.0",
  "mypy>=1.7.0",
  "pre-commit>=3.6.0",
]
docs = [
  "mkdocs>=1.5.0",
  "mkdocs-material>=9.4.0",
  "mkdocstrings[python]>=0.24.0",
]
prod = [
  "gunicorn>=21.2.0",
]

[project.urls]
Documentation = "PROJECT_DOCS_URL_PLACEHOLDER"
Issues = "PROJECT_ISSUES_URL_PLACEHOLDER"
Source = "PROJECT_REPO_URL_PLACEHOLDER"

[project.scripts]
PROJECT_NAME_PLACEHOLDER = "app.main:app"

[tool.hatch.version]
path = "app/__about__.py"

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov-report-html = [
  "- coverage combine",
  "coverage html",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.11", "3.12"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:app tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.black]
target-version = ["py311"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py311"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["app"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["app", "tests"]
branch = true
parallel = true
omit = [
  "app/__about__.py",
]

[tool.coverage.paths]
app = ["app", "*/PROJECT_NAME_PLACEHOLDER/app"]
tests = ["tests", "*/PROJECT_NAME_PLACEHOLDER/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
  "tests",
]
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::PendingDeprecationWarning",
]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "integration: marks tests as integration tests",
  "unit: marks tests as unit tests",
]